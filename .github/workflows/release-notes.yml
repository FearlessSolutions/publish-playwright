name: Publish Release Notes

on:
  workflow_call:
    inputs:
      TAG:
        type: string
        required: true
  workflow_dispatch:
    inputs:
      TAG:
        type: string
        required: true
  release:
    types: [published]

# this action needs the same permissions as the Push to GitHub Pages action because it is calling it
permissions:
  contents: write
  actions: read

jobs:
  get-release:
    name: Retrieve Release
    runs-on: ubuntu-latest
    outputs:
      published_at: ${{ steps.variables.outputs.published_at }}
      created_at: ${{ steps.variables.outputs.created_at}}
      author: ${{ steps.variables.outputs.author }}
      author_avatar: ${{ steps.variables.outputs.author_avatar }}
      author_url: ${{ steps.variables.outputs.author_url }}
      html_url: ${{ steps.variables.outputs.html_url }}
      prerelease: ${{ steps.variables.outputs.prerelease }}
      body: ${{ steps.variables.outputs.body }}
    steps:
      - name: Get Release Info
        if: github.event_name != 'release'
        uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: /repos/${{ github.repository }}/releases/tags/${{ inputs.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Release Variables
        id: variables
        run: |
          release=${{ github.event_name == 'release' && toJson(github.event.release) || steps.get_release.outputs.data }}
          echo $RELEASE
          echo "published_at=$( echo $release | jq '.published_at' )" >> "$GITHUB_OUTPUT"
          echo "created_at=$( echo $release | jq '.created_at' )" >> "$GITHUB_OUTPUT"
          echo "author=$( echo $release | jq '.author.login' )" >> "$GITHUB_OUTPUT"
          echo "author_avatar=$( echo $release | jq '.author.avatar_url' )" >> "$GITHUB_OUTPUT"
          echo "author_url=$( echo $release | jq '.author.author_url' )" >> "$GITHUB_OUTPUT"
          echo "html_url=$( echo $release | jq '.html_url' )" >> "$GITHUB_OUTPUT"
          echo "prerelease=$( echo $release | jq '.prerelease' )" >> "$GITHUB_OUTPUT"
          echo "body=$( echo $release | jq '.body' )" >> "$GITHUB_OUTPUT"

  generate-post:
    name: Generate Release Post
    needs: [get-release]
    runs-on: ubuntu-latest
    outputs:
      artifact_id: ${{ steps.filename.outputs.filename }}
    steps:
      - name: Format Published At Date
        run: |
          published_at=$(echo '${{ needs.get-release.outputs.published_at }}' | jq '.published_at' | cut -d "T" -f 1)
          echo $published_at
          echo "PUB_DATE=$published_at" >> "$GITHUB_ENV"
      - name: Create Filename
        id: filename
        run: |
          # Normalize the tag name to replace the `.` with `-`
          tag_name=$(echo "${{ inputs.TAG }}" | sed "s/\./-/g")
          echo $tag_name
          name="$PUB_DATE-$tag_name"
          echo $name
          echo "post_name=$name" >> "$GITHUB_OUTPUT"
          echo "filename=$name.md" >> "$GITHUB_OUTPUT"
      - name: Create Post
        run: |
          echo """---
          title: ${{ inputs.TAG }}
          tag: ${{ inputs.TAG }}
          category: release
          date: $PUB_DATE
          created_at: ${{ needs.get-release.outputs.created_at }}
          published_at: ${{ needs.get-release.outputs.published_at }}
          author: ${{ needs.get-release.outputs.author }}
          author_avatar: ${{ needs.get-release.outputs.author_avatar }}
          author_url: ${{ needs.get-release.outputs.author_url }}
          html_url: ${{ needs.get-release.outputs.html_url }}
          prerelease: ${{ needs.get-release.outputs.prerelease }}
          ---

          ${{ needs.get-release.outputs.body }}
          """ > steps.filename.outputs.filename
      - name: Upload Release Notes
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.filename.outputs.filename }}
          path: ${{ steps.filename.outputs.filename }}
          retention-days: 30

  publish:
    needs: [generate-post]
    uses: ./.github/workflows/push-to-gh-pages.yml
    with:
      FILE_1_ARTIFACT_ID: ${{ needs.generate-post.outputs.artifact_id }}
      FILE_1_DEPLOY_TO: _posts/releases/
      COMMIT_MSG: "adding release ${{ inputs.TAG }} to the release notes"
      URL_PATH: releases/
    secrets: inherit # allow called workflow to use GitHub secrets
